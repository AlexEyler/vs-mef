<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotDirectlyDisposeAnImport" xml:space="preserve">
    <value>This instance is an import and cannot be directly disposed.</value>
  </data>
  <data name="ContainerDisposalEncounteredExceptions" xml:space="preserve">
    <value>Instantiated part(s) threw exception(s) from IDisposable.Dispose().</value>
  </data>
  <data name="ErrorsDuringDiscovery" xml:space="preserve">
    <value>Errors occurred during discovery.</value>
  </data>
  <data name="ErrorsInComposition" xml:space="preserve">
    <value>Errors exist in the composition.</value>
  </data>
  <data name="ErrorWhileSettingImport" xml:space="preserve">
    <value>Import "{0}" could not be satisfied.</value>
  </data>
  <data name="ExceptionThrownByPartUnderInitialization" xml:space="preserve">
    <value>An exception was thrown while initializing part "{0}".</value>
  </data>
  <data name="ExportedValueNotAssignableToImport" xml:space="preserve">
    <value>Value exported from "{0}" cannot be assigned to import site "{1}".</value>
  </data>
  <data name="FailStableComposition" xml:space="preserve">
    <value>Failed to find a stable composition.</value>
  </data>
  <data name="FailureWhileScanningType" xml:space="preserve">
    <value>Failure while scanning type "{0}".</value>
  </data>
  <data name="NoImportingConstructor" xml:space="preserve">
    <value>No importing constructor.</value>
  </data>
  <data name="PartBelongsToAnotherSharingBoundary" xml:space="preserve">
    <value>Inappropriate request for export from part that belongs to another sharing boundary.</value>
  </data>
  <data name="PartIsNotInstantiable" xml:space="preserve">
    <value>This part ({0}) cannot be instantiated.</value>
  </data>
  <data name="ReflectionTypeLoadExceptionWhileEnumeratingTypes" xml:space="preserve">
    <value>ReflectionTypeLoadException while enumerating types in assembly "{0}". Results will be incomplete.</value>
  </data>
  <data name="ScanningMEFAssemblies" xml:space="preserve">
    <value>Scanning MEF assemblies...</value>
  </data>
  <data name="TypeOfMetadataViewUnsupported" xml:space="preserve">
    <value>Type of metadata view is unsupported.</value>
  </data>
  <data name="UnableToDeterminePrimarySharingBoundary" xml:space="preserve">
    <value>Unable to determine the primary sharing boundary for MEF part "{0}".</value>
  </data>
  <data name="UnableToEnumerateTypes" xml:space="preserve">
    <value>Unable to enumerate types in assembly "{0}".</value>
  </data>
  <data name="UnableToInstantiateCustomImportCollectionType" xml:space="preserve">
    <value>Unable to instantiate custom import collection type.</value>
  </data>
  <data name="UnableToLoadAssembly" xml:space="preserve">
    <value>Unable to load assembly "{0}" for scanning.</value>
  </data>
  <data name="UnexpectedMemberType" xml:space="preserve">
    <value>Unexpected member type.</value>
  </data>
  <data name="UnexpectedNumberOfExportsFound" xml:space="preserve">
    <value>Expected {0} export(s) with contract name "{1}" but found {2} after applying applicable constraints.</value>
  </data>
  <data name="UnexpectedSharedPartState" xml:space="preserve">
    <value>This shared part is in state {0} but must be in state {1} for this operation.</value>
  </data>
  <data name="AllValuesMustBeNonNull" xml:space="preserve">
    <value>All values must be non-null.</value>
  </data>
  <data name="CannotImportBecauseExportingPartCannotBeInstantiated" xml:space="preserve">
    <value>{0}: cannot import exported value from {1} because the exporting part cannot be instantiated. Is it missing an importing constructor?</value>
  </data>
  <data name="CollectionTypeMustDeriveFromICollectionOfT" xml:space="preserve">
    <value>Collection type must derive from ICollection&lt;T&gt;.</value>
  </data>
  <data name="ExactlyOneEntryForEveryImport" xml:space="preserve">
    <value>There should be exactly one entry for every import.</value>
  </data>
  <data name="ExpectedExactlyOneExportButFound" xml:space="preserve">
    <value>{0}: expected exactly 1 export of {1} but found {2}.{3}</value>
  </data>
  <data name="ExpectedOneOrZeroExportsButFound" xml:space="preserve">
    <value>{0}: expected 1 or 0 exports of {1} but found {2}.{3}</value>
  </data>
  <data name="ExportOfExportProviderNotAllowed" xml:space="preserve">
    <value>{0}: Export of ExportProvider is not allowed.</value>
  </data>
  <data name="ImportingCtorHasUnsupportedParameterTypeForImportMany" xml:space="preserve">
    <value>Importing constructor has an unsupported parameter type for an [ImportMany]. Only T[] and IEnumerable&lt;T&gt; are supported.</value>
  </data>
  <data name="ImportsThatUseGenericTypeParametersNotSupported" xml:space="preserve">
    <value>{0}: imports that use generic type parameters are not supported.</value>
  </data>
  <data name="InstanceEmpty" xml:space="preserve">
    <value>This instance is empty.</value>
  </data>
  <data name="IsNotAssignableFromExportedMEFValue" xml:space="preserve">
    <value>{0}: is not assignable from exported MEF value {1}.</value>
  </data>
  <data name="LoopBetweenNonSharedParts" xml:space="preserve">
    <value>Loop between non-shared parts.</value>
  </data>
  <data name="LoopInvolvingImportingCtorArgumentAndAllNonLazyImports" xml:space="preserve">
    <value>Loop involving ImportingConstructor argument and all non-lazy imports.</value>
  </data>
  <data name="MetadataTypeNotSupported" xml:space="preserve">
    <value>{0}: metadata type {1} is not supported.</value>
  </data>
  <data name="NotATypeSpec" xml:space="preserve">
    <value>Not a type spec.</value>
  </data>
  <data name="NotClosedFormOfOther" xml:space="preserve">
    <value>Not a closed form of the other.</value>
  </data>
  <data name="NotGenericTypeDefinition" xml:space="preserve">
    <value>This is not a generic type definition.</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>Not initialized.</value>
  </data>
  <data name="PartIsNotShared" xml:space="preserve">
    <value>Part is not shared.</value>
  </data>
  <data name="UnresolvableMetadataToken" xml:space="preserve">
    <value>Unresolvable metadata token.</value>
  </data>
  <data name="WrongLength" xml:space="preserve">
    <value>Wrong length.</value>
  </data>
  <data name="AssemblyLoaderGenericError" xml:space="preserve">
    <value>The MEF assembly loader has thrown an exception: {0}</value>
  </data>
</root>